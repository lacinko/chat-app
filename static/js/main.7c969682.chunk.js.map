{"version":3,"sources":["components/Header.jsx","utils/firebase.js","components/LoginContainer.jsx","components/ChatContainer.jsx","components/UserContainer.jsx","App.js","serviceWorkerRegistration.js","reportWebVitals.js","index.js"],"names":["Header","props","className","children","FirebaseContext","createContext","app","apps","length","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","Provider","value","LoginContainer","firebase","useContext","useState","email","password","error","userInfo","setUserInfo","login","auth","signInWithEmailAndPassword","then","res","history","push","catch","err","console","log","code","createUserWithEmailAndPassword","prevVal","handleChange","e","target","name","onSubmit","preventDefault","type","placeholder","onChange","username","ChatContainer","message","setMessage","mounted","useRef","previousMessages","messageContainer","undefined","scrollToTheBottom","current","scrollTop","scrollHeight","useEffect","messages","getAuthor","msg","nextMsg","author","to","user_id","handleSubmit","onClick","signOut","messagesLoaded","ref","element","map","idx","user","id","onKeyDown","key","UserContainer","renderedUserEmail","userID","withRouter","setMessages","setUser","setMessagesLoaded","handleSubmitMessage","data","uid","timestamp","Date","now","database","onAuthStateChanged","on","snapshot","Object","keys","val","onMessage","path","component","exact","render","match","params","isLocalhost","Boolean","window","location","hostname","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById","addEventListener","URL","process","href","origin","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.7c969682.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nexport const Header = (props) => {\r\n    return (\r\n        <div className=\"header\">\r\n            <h1>Chat App</h1>\r\n            {props.children}\r\n        </div>\r\n    )\r\n}\r\n","import React, { createContext } from 'react'\r\nimport app from 'firebase/app'\r\n\r\nconst FirebaseContext = createContext(null)\r\nexport { FirebaseContext }\r\n\r\nexport default ({ children }) => {\r\n    if (!app.apps.length) {\r\n      app.initializeApp({\r\n        apiKey: \"AIzaSyB7Vzr9T9fjvL8QWyR3Gko8ku3RJvWxMDQ\",\r\n        authDomain: \"chatapp-2604c.firebaseapp.com\",\r\n        databaseURL: \"https://chatapp-2604c-default-rtdb.europe-west1.firebasedatabase.app\",\r\n        projectId: \"chatapp-2604c\",\r\n        storageBucket: \"chatapp-2604c.appspot.com\",\r\n        messagingSenderId: \"438557718193\",\r\n        appId: \"1:438557718193:web:784da41c914dfa6b811490\",\r\n        measurementId: \"G-H614FWZQB1\"\r\n      })\r\n    }\r\n    return (\r\n      <FirebaseContext.Provider value={ app }>\r\n        { children }\r\n      </FirebaseContext.Provider>\r\n    )\r\n  }","import React, { useContext, useState } from 'react'\r\nimport { Header } from './Header'\r\nimport { FirebaseContext } from '../utils/firebase'\r\nimport 'firebase/auth'\r\n\r\nexport const LoginContainer = (props) => {\r\n   const firebase = useContext(FirebaseContext)\r\n    const [userInfo, setUserInfo] = useState({\r\n        email: \"\",\r\n        password:\"\",\r\n        error: \"\",\r\n    })\r\n\r\n    const signup = () =>{\r\n        firebase.auth().createUserWithEmailAndPassword(userInfo.email,userInfo.password)\r\n            .then(res => console.log(res))\r\n            .catch(err => {\r\n                console.log(err);\r\n                setUserInfo(prevVal => ({\r\n                    ...prevVal,\r\n                    error: \"Error signing up.\",\r\n                }))\r\n            })\r\n    }\r\n\r\n    const onLogin = () => {\r\n        props.history.push(\"/\")\r\n    }\r\n\r\n    const login = () => {\r\n        firebase.auth().signInWithEmailAndPassword(userInfo.email,userInfo.password)\r\n            .then(res => {\r\n                onLogin()\r\n            })\r\n            .catch(err => {\r\n                console.log(err)\r\n                if(err.code ===\"auth/user-not-found\"){\r\n                    signup()\r\n                }\r\n                else{\r\n                    setUserInfo(prevVal => ({\r\n                        ...prevVal,\r\n                        error: \"Error logging in\",\r\n                    }))\r\n                }\r\n            })\r\n    }\r\n\r\n    const handleSubmit = (e) =>{\r\n        e.preventDefault()\r\n        setUserInfo(prevVal => ({\r\n            ...prevVal,\r\n            error: \"\",\r\n        }))\r\n        if(userInfo.email && userInfo.password){\r\n            login()\r\n        }\r\n        else{\r\n            setUserInfo(prevVal => ({\r\n                ...prevVal,\r\n                error: \"Please fill in both field.\",\r\n            }))\r\n        }\r\n    }\r\n\r\n    const handleChange = (e) => {\r\n        const {name, value} = e.target\r\n        setUserInfo(prevVal =>({\r\n            ...prevVal,\r\n            [name]: value, \r\n        }))\r\n    }\r\n\r\n\r\n    return (\r\n        <div className=\"login-container\">\r\n            <Header />\r\n            <form onSubmit={handleSubmit}>\r\n                <p>Please, log in into the app. Or make a new account by entering your email and password.</p>\r\n                <input type=\"text\" name=\"email\" placeholder=\"Please, enter your username\" onChange={handleChange} value={userInfo.username}/>\r\n                <input type=\"password\" name=\"password\" placeholder=\"Please, enter your password.\" onChange={handleChange} value={userInfo.password}/>\r\n                <p className=\"login-container__error\">{userInfo.error}</p>\r\n                <button type=\"submit\">Login</button>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n","import React, { useContext, useEffect, useRef, useState } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Header } from \"./Header\";\r\nimport { FirebaseContext } from \"../utils/firebase\";\r\nimport \"firebase/auth\";\r\nimport \"../styles/ChatContainer.css\";\r\n\r\nexport const ChatContainer = (props) => {\r\n  const firebase = useContext(FirebaseContext);\r\n\r\n  const [message, setMessage] = useState(\"\");\r\n  const mounted = useRef();\r\n  const previousMessages = useRef();\r\n  let messageContainer = useRef(undefined);\r\n\r\n  const handleLogout = () => {\r\n    firebase.auth().signOut();\r\n  };\r\n\r\n  const handleInputChange = (e) => {\r\n    const { value } = e.target;\r\n    setMessage(value);\r\n  };\r\n\r\n  const handleKeyDown = (e) => {\r\n    if (e.key === \"Enter\") {\r\n      e.preventDefault();\r\n      handleSubmit();\r\n    }\r\n  };\r\n\r\n  const scrollToTheBottom = () => {\r\n    if (messageContainer.current) {\r\n      messageContainer.scrollTop = messageContainer.scrollHeight;\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (!mounted.current) {\r\n      scrollToTheBottom();\r\n      mounted.current = true;\r\n      previousMessages.current = props.messages;\r\n      console.log(\"compomentDidMount\");\r\n    } else {\r\n      if (previousMessages.length !== props.messages.length) {\r\n        scrollToTheBottom();\r\n      }\r\n    }\r\n  }, [props.messages]);\r\n\r\n  const getAuthor = (msg, nextMsg) => {\r\n    if (!nextMsg || nextMsg.author !== msg.author) {\r\n      return (\r\n        <p className=\"author\">\r\n          <Link to={`/users/${msg.user_id}`}>{msg.author}</Link>\r\n        </p>\r\n      );\r\n    }\r\n  };\r\n\r\n  const handleSubmit = () => {\r\n    props.onSubmit(message);\r\n    setMessage(\"\");\r\n  };\r\n  return (\r\n    <div className=\"chat-container\">\r\n      <Header>\r\n        <button onClick={handleLogout}>Logout</button>\r\n      </Header>\r\n      {props.messagesLoaded ? (\r\n        <div\r\n          className=\"message-container\"\r\n          ref={(element) => (messageContainer = element)}\r\n        >\r\n          {props.messages.map((msg, idx) => (\r\n            <div\r\n              key={msg.id}\r\n              className={`message ${props.user.email === msg.author && \"mine\"}`}\r\n            >\r\n              <p>{msg.msg}</p>\r\n              {getAuthor(msg, props.messages[idx + 1])}\r\n            </div>\r\n          ))}\r\n        </div>\r\n      ) : (\r\n        <div className=\"loading-container\">\r\n          <h4>Loading messages, please wait!</h4>\r\n        </div>\r\n      )}\r\n      <div className=\"chat-input\">\r\n        <textarea\r\n          placeholder=\"Add your message\"\r\n          value={message}\r\n          onChange={handleInputChange}\r\n          onKeyDown={handleKeyDown}\r\n        />\r\n        <button onClick={handleSubmit}>SEND</button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Header } from \"./Header\";\r\n\r\nexport const UserContainer = (props) => {\r\n  let renderedUserEmail = false;\r\n\r\n  const getAuthor = (author) => {\r\n    if (!renderedUserEmail) {\r\n      renderedUserEmail = true;\r\n      return <p className=\"author\">{author}</p>;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"user-container\">\r\n      <Header>\r\n        <Link to=\"/\">\r\n          <button>Back To Chat</button>\r\n        </Link>\r\n      </Header>\r\n      {props.messagesLoaded ? (\r\n        <div className=\"messages-container\">\r\n          {props.messages.map((msg) => {\r\n            if (msg.user_id === props.userID) {\r\n              return (\r\n                <div key={msg.id} className=\"message\">\r\n                  {getAuthor(msg.author)}\r\n                  <p>{msg.msg}</p>\r\n                </div>\r\n              );\r\n            }\r\n          })}\r\n        </div>\r\n      ) : (\r\n        <h2>Loading messages, please wait!</h2>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n","import React, { useContext, useEffect, useState } from \"react\";\nimport { Route, withRouter } from \"react-router-dom\";\nimport \"./App.css\";\nimport { LoginContainer } from \"./components/LoginContainer\";\nimport { ChatContainer } from \"./components/ChatContainer\";\nimport { UserContainer } from \"./components/UserContainer\";\nimport { FirebaseContext } from \"./utils/firebase\";\nimport \"firebase/auth\";\nimport \"firebase/database\";\n\nfunction App(props) {\n  const [messages, setMessages] = useState([]);\n  const [user, setUser] = useState(null);\n  const [messagesLoaded, setMessagesLoaded] = useState(false);\n\n  const firebase = useContext(FirebaseContext);\n\n  const handleSubmitMessage = (msg) => {\n    const data = {\n      msg,\n      author: user.email,\n      user_id: user.uid,\n      timestamp: Date.now(),\n    };\n    firebase.database().ref(\"messages/\").push(data);\n  };\n\n  const onMessage = (snapshot) => {\n    const messages = Object.keys(snapshot.val()).map((key) => {\n      const msg = snapshot.val()[key];\n      msg.id = key;\n      return msg;\n    });\n    setMessages(messages);\n  };\n\n  useEffect(() => {\n    firebase.auth().onAuthStateChanged((user) => {\n      if (user) {\n        setUser(user);\n        console.log(user);\n      } else {\n        props.history.push(\"/login\");\n      }\n    });\n    firebase\n      .database()\n      .ref(\"/messages\")\n      .on(\"value\", (snapshot) => {\n        onMessage(snapshot);\n      });\n    if (!messagesLoaded) {\n      setMessagesLoaded(true);\n    }\n  }, []);\n  return (\n    <div className=\"App\">\n      <Route path=\"/login\" component={LoginContainer} />\n      <Route\n        exact\n        path=\"/\"\n        render={() => (\n          <ChatContainer\n            messagesLoaded={messagesLoaded}\n            onSubmit={handleSubmitMessage}\n            user={user}\n            messages={messages}\n          />\n        )}\n      />\n      <Route\n        path=\"/users/:id\"\n        render={({ history, match }) => (\n          <UserContainer\n            messages={messages}\n            messagesLoaded={messagesLoaded}\n            userID={match.params.id}\n          />\n        )}\n      />\n    </div>\n  );\n}\n\nexport default withRouter(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  // Check that service workers are supported\n  if (\"serviceWorker\" in navigator) {\n    // Use the window load event to keep the page load performant\n    window.addEventListener(\"load\", () => {\n      navigator.serviceWorker.register(\"/src/service-worker.js\");\n    });\n  }\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://cra.link/PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://cra.link/PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorkerRegistration from \"./serviceWorkerRegistration\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport FirebaseProvider from \"./utils/firebase\";\n\nReactDOM.render(\n  <FirebaseProvider>\n    <React.StrictMode>\n      <BrowserRouter>\n        <App />\n      </BrowserRouter>\n    </React.StrictMode>\n  </FirebaseProvider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\n\nserviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}