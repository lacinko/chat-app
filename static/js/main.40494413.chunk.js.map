{"version":3,"sources":["components/Header.jsx","utils/firebase.js","components/LoginContainer.jsx","components/ChatContainer.jsx","components/UserContainer.jsx","App.js","serviceWorkerRegistration.js","reportWebVitals.js","index.js"],"names":["Header","props","className","children","FirebaseContext","createContext","app","apps","length","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","Provider","value","LoginContainer","firebase","useContext","useState","email","password","error","userInfo","setUserInfo","login","auth","signInWithEmailAndPassword","then","res","history","push","catch","err","console","log","code","createUserWithEmailAndPassword","prevVal","handleChange","e","target","name","onSubmit","preventDefault","type","placeholder","onChange","username","ChatContainer","message","setMessage","handleSubmit","onClick","signOut","messages","map","msg","author","id","onKeyDown","key","UserContainer","to","match","params","withRouter","setMessages","user","setUser","handleSubmitMessage","data","user_id","uid","timestamp","Date","now","database","ref","useEffect","onAuthStateChanged","on","snapshot","Object","keys","val","onMessage","path","component","exact","render","Boolean","window","location","hostname","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.40494413.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nexport const Header = (props) => {\r\n    return (\r\n        <div className=\"header\">\r\n            <h1>Chat App</h1>\r\n            {props.children}\r\n        </div>\r\n    )\r\n}\r\n","import React, { createContext } from 'react'\r\nimport app from 'firebase/app'\r\n\r\nconst FirebaseContext = createContext(null)\r\nexport { FirebaseContext }\r\n\r\nexport default ({ children }) => {\r\n    if (!app.apps.length) {\r\n      app.initializeApp({\r\n        apiKey: \"AIzaSyB7Vzr9T9fjvL8QWyR3Gko8ku3RJvWxMDQ\",\r\n        authDomain: \"chatapp-2604c.firebaseapp.com\",\r\n        databaseURL: \"https://chatapp-2604c-default-rtdb.europe-west1.firebasedatabase.app\",\r\n        projectId: \"chatapp-2604c\",\r\n        storageBucket: \"chatapp-2604c.appspot.com\",\r\n        messagingSenderId: \"438557718193\",\r\n        appId: \"1:438557718193:web:784da41c914dfa6b811490\",\r\n        measurementId: \"G-H614FWZQB1\"\r\n      })\r\n    }\r\n    return (\r\n      <FirebaseContext.Provider value={ app }>\r\n        { children }\r\n      </FirebaseContext.Provider>\r\n    )\r\n  }","import React, { useContext, useState } from 'react'\r\nimport { Header } from './Header'\r\nimport { FirebaseContext } from '../utils/firebase'\r\nimport 'firebase/auth'\r\n\r\nexport const LoginContainer = (props) => {\r\n   const firebase = useContext(FirebaseContext)\r\n    const [userInfo, setUserInfo] = useState({\r\n        email: \"\",\r\n        password:\"\",\r\n        error: \"\",\r\n    })\r\n\r\n    const signup = () =>{\r\n        firebase.auth().createUserWithEmailAndPassword(userInfo.email,userInfo.password)\r\n            .then(res => console.log(res))\r\n            .catch(err => {\r\n                console.log(err);\r\n                setUserInfo(prevVal => ({\r\n                    ...prevVal,\r\n                    error: \"Error signing up.\",\r\n                }))\r\n            })\r\n    }\r\n\r\n    const onLogin = () => {\r\n        props.history.push(\"/\")\r\n    }\r\n\r\n    const login = () => {\r\n        firebase.auth().signInWithEmailAndPassword(userInfo.email,userInfo.password)\r\n            .then(res => {\r\n                onLogin()\r\n            })\r\n            .catch(err => {\r\n                console.log(err)\r\n                if(err.code ===\"auth/user-not-found\"){\r\n                    signup()\r\n                }\r\n                else{\r\n                    setUserInfo(prevVal => ({\r\n                        ...prevVal,\r\n                        error: \"Error logging in\",\r\n                    }))\r\n                }\r\n            })\r\n    }\r\n\r\n    const handleSubmit = (e) =>{\r\n        e.preventDefault()\r\n        setUserInfo(prevVal => ({\r\n            ...prevVal,\r\n            error: \"\",\r\n        }))\r\n        if(userInfo.email && userInfo.password){\r\n            login()\r\n        }\r\n        else{\r\n            setUserInfo(prevVal => ({\r\n                ...prevVal,\r\n                error: \"Please fill in both field.\",\r\n            }))\r\n        }\r\n    }\r\n\r\n    const handleChange = (e) => {\r\n        const {name, value} = e.target\r\n        setUserInfo(prevVal =>({\r\n            ...prevVal,\r\n            [name]: value, \r\n        }))\r\n    }\r\n\r\n\r\n    return (\r\n        <div className=\"login-container\">\r\n            <Header />\r\n            <form onSubmit={handleSubmit}>\r\n                <p>Please, log in into the app. Or make a new account by entering your email and password.</p>\r\n                <input type=\"text\" name=\"email\" placeholder=\"Please, enter your username\" onChange={handleChange} value={userInfo.username}/>\r\n                <input type=\"password\" name=\"password\" placeholder=\"Please, enter your password.\" onChange={handleChange} value={userInfo.password}/>\r\n                <p className=\"login-container__error\">{userInfo.error}</p>\r\n                <button type=\"submit\">Login</button>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n","import React, { useContext, useState } from 'react'\r\nimport {Header} from \"./Header\"\r\nimport { FirebaseContext } from '../utils/firebase'\r\nimport 'firebase/auth'\r\n\r\nexport const ChatContainer = (props) => {\r\n    const firebase = useContext(FirebaseContext)\r\n\r\n    const [message, setMessage] = useState(\"\")\r\n\r\n    const handleLogout = () => {\r\n        firebase.auth().signOut();\r\n    }\r\n\r\n    const handleInputChange = (e) =>{\r\n        const {value} = e.target;\r\n        setMessage(value);\r\n    }\r\n\r\n    const handleKeyDown = (e) => {\r\n        if(e.key === \"Enter\"){\r\n            e.preventDefault();\r\n            handleSubmit()\r\n        }\r\n    }\r\n\r\n    const handleSubmit = () =>{\r\n        props.onSubmit(message);\r\n        setMessage(\"\")\r\n    }\r\n    return (\r\n        \r\n        <div className=\"chat-container\">\r\n            <Header>\r\n            <button onClick={handleLogout}>Logout</button>\r\n            </Header>\r\n           <div className=\"message-container\">\r\n                {props.messages.map(msg => (\r\n                    <div key={msg.id} className=\"message\">\r\n                        <p>{msg.msg}</p>\r\n                        <p>{msg.author}</p>\r\n                    </div>\r\n                ))}\r\n           </div>\r\n           <div className=\"chat-input\">\r\n                <textarea placeholder=\"Add your message\" value={message} onChange={handleInputChange} onKeyDown={handleKeyDown}/>\r\n                <button onClick={handleSubmit}>SEND</button>\r\n           </div>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { Link } from 'react-router-dom';\r\nimport { Header } from './Header'\r\n\r\nexport const UserContainer = (props) => {\r\n    return (\r\n        <div className=\"user-container\">\r\n            <Header>\r\n            <Link to=\"/\">\r\n                    <button>\r\n                        Back To Chat\r\n                    </button>\r\n                </Link>\r\n            </Header>\r\n            <h1>Hello from User Container!{props.match.params.id}</h1>\r\n        </div>\r\n    )\r\n}\r\n","import React, { useContext, useEffect, useState } from 'react';\nimport { Route, withRouter } from 'react-router-dom';\nimport './App.css';\nimport { LoginContainer } from './components/LoginContainer';\nimport { ChatContainer } from './components/ChatContainer';\nimport {UserContainer} from \"./components/UserContainer\"\nimport { FirebaseContext } from './utils/firebase'\nimport 'firebase/auth'\nimport 'firebase/database'\n\n\nfunction App(props) {\n  const [messages, setMessages] = useState([])\n  const [user, setUser] = useState(null)\n\n  const firebase = useContext(FirebaseContext)\n\n  const handleSubmitMessage = (msg) => {\n    const data = {\n      msg,\n      author: user.email,\n      user_id: user.uid,\n      timestamp: Date.now()\n    };\n    firebase.database().ref(\"messages/\").push(data)\n  }\n\n  const onMessage = (snapshot) => {\n    const messages = Object.keys(snapshot.val()).map(key => {\n      const msg = snapshot.val()[key];\n      msg.id = key;\n      return msg;\n    })\n    setMessages(messages)\n  }\n  \n  useEffect(() => {\n    firebase.auth().onAuthStateChanged(user => {\n        if(user){\n            setUser((user))\n            console.log(user)\n        }\n        else{\n          props.history.push('/login')\n        }\n    })\n    firebase.database().ref(\"/messages\").on(\"value\", snapshot => {\n      onMessage(snapshot)\n    })\n}, [])\n  return (\n    <div className=\"App\">\n      <Route path=\"/login\" component={LoginContainer} />\n      <Route exact path=\"/\" render={()=><ChatContainer onSubmit={handleSubmitMessage} messages={messages}/>}/>\n      <Route path=\"/users/:id\" component={UserContainer} />\n    </div>\n  );\n}\n\nexport default withRouter(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom'\nimport './index.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\nimport FirebaseProvider from \"./utils/firebase\"\n\nReactDOM.render(\n  <FirebaseProvider>\n  <React.StrictMode>\n    <BrowserRouter>\n    <App />\n    </BrowserRouter>\n  </React.StrictMode>\n  </FirebaseProvider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.unregister();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}